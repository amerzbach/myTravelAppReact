{"version":3,"sources":["components/Navbar.js","components/hero/hero.js","services/Api.js","services/DateTimeFormating.js","components/Flights/FlightsForm.js","components/Flights/FlightsList.js","containers/Flights.js","containers/Hotels.js","containers/Bikes.js","App.js","serviceWorker.js","index.js"],"names":["CustomNavbar","react_default","a","createElement","Navbar","className","bg","variant","Brand","href","Hero","dist_default","src","this","props","videosrc","h1","h2","Component","getFlights","flightFrom","flightTo","dateFlightFrom","dateFlightTo","axios","post","then","response","console","log","data","getDuration","duration","replace","getDateHour","date","newDate","Date","year","getFullYear","month","getMonth","dt","getDate","hour","getHours","minutes","getMinutes","getDateApi","getToday","num","setDate","getFormDate","FlightsForm","state","flightsDataInbound","flightsDataOutbound","error","handleChange","event","_event$target","target","name","value","_this","setState","Object","defineProperty","handleDateFlightFromChange","handleDateFlightToChange","handleSubmit","preventDefault","_this$state","trackPromise","refreshflightsList","catch","err","align","Form","onSubmit","style","width","Row","Col","Label","htmlFor","Control","type","onChange","id","placeholder","required","min","Button","FlightsList","position","zIndex","inboundFlights","length","Table","striped","bordered","hover","colSpan","class","map","Flight","Array","isArray","stopsNumber","TotalJourney","Duration","index","rowSpan","MarketingCarrier","AirlineID","FlightNumber","Departure","AirportCode","Arrival","ScheduledTimeLocal","DateTime","outboundFlights","Flights","hero_hero","FlightsForm_FlightsForm","Flights_FlightsList","Hotels","Bikes","App","components_Navbar","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","usePromiseTracker","promiseInProgress","height","display","justifyContent","alignItems","react_loader_spinner_default","color","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1878868d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar } from \"react-bootstrap\";\n// import \"bootstrap/dist/css/bootstrap.css\";\n\nconst CustomNavbar = () => {\n  return (\n    <Navbar className=\"nav\" bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand href=\"/\">myTravelApp v1</Navbar.Brand>\n      <Navbar.Brand href=\"/Flights\">Flights</Navbar.Brand>\n      <Navbar.Brand href=\"/Hotels\">Hotels</Navbar.Brand>\n      <Navbar.Brand href=\"/Bikes\">Bikes</Navbar.Brand>\n    </Navbar>\n  );\n};\n\nexport default CustomNavbar;\n","import React, { Component } from 'react'\nimport \"./hero.css\"\n\nimport BackgroundVideo from 'react-background-video-player';\n\nclass Hero extends Component {\n\n\n\n  render() {\n    return (\n      <div className=\"hero\">\n        <BackgroundVideo\n        src={this.props.videosrc}\n        />\n        <div className=\"hero-text\">\n          <h1>{this.props.h1}</h1>\n          <h2>{this.props.h2}</h2>\n        </div>\n      </div>\n          )\n        }\n      }\n\n      export default Hero;","import axios from \"axios\";\n\nconst getFlights = (flightFrom, flightTo, dateFlightFrom, dateFlightTo) => \n  \naxios\n    .post(\"/api/Flights\", {\n      flightFrom: flightFrom,\n      flightTo: flightTo,\n      dateFlightFrom: dateFlightFrom,\n      dateFlightTo: dateFlightTo\n    })\n    .then(response => {\n      console.log(response.data);\n      return response.data;\n    });\n\nexport { getFlights };\n","const getDuration = duration => {\n  // Transforms format of durations strings like P1DT5H35M into 1D 5H 35m\n  // Using regular expressions for formating\n\n  duration = duration.replace(/P/, \"\");\n  duration = duration.replace(/T/, \"\");\n  duration = duration.replace(/D/, \"D \");\n  duration = duration.replace(/H/, \"H \");\n  duration = duration.replace(/M/, \"m\");\n  return duration;\n};\n\nconst getDateHour = date => {\n  // Transforms format of date hours like this 2019-07-29T06:20 into 6:20 29/07/2019\n  \n  let newDate = new Date(date);\n\n  let year = newDate.getFullYear();\n  let month = newDate.getMonth() + 1;\n  let dt = newDate.getDate();\n  let hour = newDate.getHours();\n  let minutes = newDate.getMinutes();\n\n  if (dt < 10) {\n    dt = \"0\" + dt;\n  }\n  if (month < 10) {\n    month = \"0\" + month;\n  }\n  if (minutes < 10 ) {\n    minutes = \"0\" + minutes;\n  }\n\n  return hour + \":\" + minutes + \" \"+ dt + \"/\" + month + \"/\" + year;\n};\n\n\nconst getDateApi = date => {\n  // Transforms format of date hours like this 2019-07-29T06:20 into 2019-07-29 for Api Calls\n  \n  let newDate = new Date(date);\n\n  let year = newDate.getFullYear();\n  let month = newDate.getMonth() + 1;\n  let dt = newDate.getDate();\n\n  if (dt < 10) {\n    dt = \"0\" + dt;\n  }\n  if (month < 10) {\n    month = \"0\" + month;\n  }\n\n  return year + \"-\" + month + \"-\" + dt;\n};\n\nconst getToday = (num) => {\n  // Returs date of today + num \n  \n  let newDate = new Date();\n  newDate = newDate.setDate(newDate.getDate() + num)\n  return newDate;\n\n}\n\n\nconst getFormDate = (date) => {\n  // Returs date formated for input type date YYYY-MM-DD\n  \n  let newDate = new Date(date);\n  let year = newDate.getFullYear();\n  let month = newDate.getMonth() + 1;\n  let dt = newDate.getDate();\n\n  if (dt < 10) {\n    dt = \"0\" + dt;\n  }\n  if (month < 10) {\n    month = \"0\" + month;\n  }\n\n  return year + \"-\" + month + \"-\" + dt;\n}\n\n\nexport { getDuration, getDateHour, getDateApi, getToday, getFormDate };\n","import React, { Component } from \"react\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport { getFlights } from \"../../services/Api\";\nimport { trackPromise } from \"react-promise-tracker\";\nimport {\n  getToday,\n  getFormDate,\n  getDateApi\n} from \"../../services/DateTimeFormating\";\n\nexport default class FlightsForm extends Component {\n  state = {\n    flightFrom: \"\",\n    flightTo: \"\",\n    dateFlightFrom: getToday(0),\n    dateFlightTo: getToday(0),\n    flightsDataInbound: [],\n    flightsDataOutbound: [],\n    error: \"\",\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleDateFlightFromChange = event => {\n    let newDate = new Date(event.target.value);\n    let newDateTo = new Date(this.state.dateFlightTo);\n    if (newDate > newDateTo) {\n      this.setState({\n        dateFlightFrom: newDate,\n        dateFlightTo: newDate\n      });\n    } else {\n      this.setState({\n        dateFlightFrom: newDate\n      });\n    }\n  };\n\n  handleDateFlightToChange = event => {\n    let newDate = new Date(event.target.value);\n    console.log(newDate);\n    this.setState({\n      dateFlightTo: newDate\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const { flightFrom, flightTo, dateFlightFrom, dateFlightTo } = this.state;\n\n    trackPromise(\n      getFlights(\n        flightFrom,\n        flightTo,\n        getDateApi(dateFlightFrom),\n        getDateApi(dateFlightTo)\n      ).then(response => {\n        this.props.refreshflightsList(response);\n        this.setState({\n          flightFrom: response.flightFrom,\n          flightTo: response.flightTo,\n          dateFlightFrom: new Date(response.dateFlightFrom),\n          dateFlightTo: new Date(response.dateFlightTo),\n          flightsDataInbound: response.flightsDataInbound,\n          flightsDataOutbound: response.flightsDataOutbound,\n        });\n      })\n    ).catch(err => {\n      console.log(err);\n    });\n  };\n\n  render() {\n    return (\n      <div align=\"center\">\n        <br />\n\n        <Form onSubmit={this.handleSubmit} style={{ width: \"95%\" }}>\n          <Form.Row>\n            <Col>\n              <Form.Label htmlFor=\"flightFrom\">From</Form.Label>\n\n              <Form.Control\n                type=\"text\"\n                onChange={this.handleChange}\n                id=\"flightFrom\"\n                name=\"flightFrom\"\n                value={this.state.flightFrom || \"\"}\n                placeholder=\"Origin airport IATA Code\"\n                required\n              />\n            </Col>\n\n            <Col>\n              <Form.Label htmlFor=\"flightTo\">To</Form.Label>\n\n              <Form.Control\n                type=\"text\"\n                onChange={this.handleChange}\n                id=\"flightTo\"\n                name=\"flightTo\"\n                value={this.state.flightTo || \"\"}\n                placeholder=\"Destination airport IATA Code\"\n                required\n              />\n            </Col>\n\n            <Col>\n              <Form.Label htmlFor=\"dateFlightFrom\">Date From</Form.Label>\n\n              <Form.Control\n                type=\"date\"\n                onChange={this.handleDateFlightFromChange}\n                id=\"dateFlightFrom\"\n                name=\"dateFlightFrom\"\n                value={getFormDate(this.state.dateFlightFrom)}\n                min={getFormDate(getToday(0))}\n                required\n              />\n            </Col>\n\n            <Col>\n              <Form.Label htmlFor=\"dateFlightTo\">Date To</Form.Label>\n\n              <Form.Control\n                type=\"date\"\n                onChange={this.handleDateFlightToChange}\n                id=\"dateFlightTo\"\n                name=\"dateFlightTo\"\n                value={getFormDate(this.state.dateFlightTo)}\n                min={getFormDate(getToday(0))}\n              />\n            </Col>\n          </Form.Row>\n          <Form.Row>\n            <Col>\n              <br />\n              <Button type=\"submit\">Flight Search</Button>\n            </Col>\n          </Form.Row>\n        </Form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Table, Alert } from \"react-bootstrap\";\nimport { getDuration, getDateHour } from \"../../services/DateTimeFormating\";\n\nconst FlightsList = props => {\n  return (\n    <div align=\"center\" style={{position: \"absolute\", zIndex: 1, width: \"100%\"}}>\n      <br />\n\n      {props.inboundFlights.length > 0 && (\n        <Table\n          striped\n          bordered\n          hover\n          variant=\"dark\"\n          style={{ width: \"95%\" }}\n          id=\"inboundTable\"\n        >\n          <thead>\n            <tr>\n              <th colSpan=\"7\" class=\"bg-primary text-white\">\n                Inbound Flights\n              </th>\n            </tr>\n          </thead>\n          <thead>\n            <tr>\n              <th>Duration</th>\n              <th>Airline</th>\n              <th>Flight</th>\n              <th>Dep Airport</th>\n              <th>Arr Airport</th>\n              <th>Dep</th>\n              <th>Arr</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {props.inboundFlights.map(Flight => {\n              if (Array.isArray(Flight.Flight)) {\n                const stopsNumber = Flight.Flight.length - 1;\n                const duration = getDuration(Flight.TotalJourney.Duration);\n                return Flight.Flight.map((Flight, index) => {\n                  if (index === 0) {\n                    return (\n                      <tr>\n                        <td rowSpan={stopsNumber + 1}>\n                          {duration} <br />\n                          {stopsNumber}\n                          {stopsNumber > 1 ? \" Stops\" : \" Stop\"}\n                        </td>\n                        <td>{Flight.MarketingCarrier.AirlineID}</td>\n                        <td>{Flight.MarketingCarrier.FlightNumber}</td>\n                        <td>{Flight.Departure.AirportCode}</td>\n                        <td>{Flight.Arrival.AirportCode}</td>\n                        <td>\n                          {getDateHour(\n                            Flight.Departure.ScheduledTimeLocal.DateTime\n                          )}\n                        </td>\n                        <td>\n                          {getDateHour(\n                            Flight.Arrival.ScheduledTimeLocal.DateTime\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  } else {\n                    return (\n                      <tr>\n                        <td>{Flight.MarketingCarrier.AirlineID}</td>\n                        <td>{Flight.MarketingCarrier.FlightNumber}</td>\n                        <td>{Flight.Departure.AirportCode}</td>\n                        <td>{Flight.Arrival.AirportCode}</td>\n                        <td>\n                          {getDateHour(\n                            Flight.Departure.ScheduledTimeLocal.DateTime\n                          )}\n                        </td>\n                        <td>\n                          {getDateHour(\n                            Flight.Arrival.ScheduledTimeLocal.DateTime\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  }\n                });\n              } else {\n                return (\n                  <tr>\n                    <td>\n                      {getDuration(Flight.TotalJourney.Duration)}\n                      <br />\n                      Non-stop\n                    </td>\n                    <td>{Flight.Flight.MarketingCarrier.AirlineID}</td>\n                    <td>{Flight.Flight.MarketingCarrier.FlightNumber}</td>\n                    <td>{Flight.Flight.Departure.AirportCode}</td>\n                    <td>{Flight.Flight.Arrival.AirportCode}</td>\n                    <td>\n                      {getDateHour(\n                        Flight.Flight.Departure.ScheduledTimeLocal.DateTime\n                      )}\n                    </td>\n                    <td>\n                      {getDateHour(\n                        Flight.Flight.Arrival.ScheduledTimeLocal.DateTime\n                      )}\n                    </td>\n                  </tr>\n                );\n              }\n            })}\n          </tbody>\n        </Table>\n      )}\n\n      <br />\n\n      {props.outboundFlights.length > 0 && (\n        <Table\n          striped\n          bordered\n          hover\n          variant=\"dark\"\n          style={{ width: \"95%\" }}\n          id=\"outboundTable\"\n        >\n          <thead>\n            <tr>\n              <th colSpan=\"7\" class=\"bg-primary text-white\">\n                Outbound Flights\n              </th>\n            </tr>\n            <tr>\n              <th>Duration</th>\n              <th>Airline</th>\n              <th>Flight</th>\n              <th>Dep Airport</th>\n              <th>Arr Airport</th>\n              <th>Dep</th>\n              <th>Arr</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {props.outboundFlights.map(Flight => {\n              if (Array.isArray(Flight.Flight)) {\n                const stopsNumber = Flight.Flight.length - 1;\n                const duration = getDuration(Flight.TotalJourney.Duration);\n                return Flight.Flight.map((Flight, index) => {\n                  if (index === 0) {\n                    return (\n                      <tr>\n                        <td rowSpan={stopsNumber + 1}>\n                          {duration} <br />\n                          {stopsNumber}\n                          {stopsNumber > 1 ? \" Stops\" : \" Stop\"}\n                        </td>\n                        <td>{Flight.MarketingCarrier.AirlineID}</td>\n                        <td>{Flight.MarketingCarrier.FlightNumber}</td>\n                        <td>{Flight.Departure.AirportCode}</td>\n                        <td>{Flight.Arrival.AirportCode}</td>\n                        <td>\n                          {getDateHour(\n                            Flight.Departure.ScheduledTimeLocal.DateTime\n                          )}\n                        </td>\n                        <td>\n                          {getDateHour(\n                            Flight.Arrival.ScheduledTimeLocal.DateTime\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  } else {\n                    return (\n                      <tr>\n                        <td>{Flight.MarketingCarrier.AirlineID}</td>\n                        <td>{Flight.MarketingCarrier.FlightNumber}</td>\n                        <td>{Flight.Departure.AirportCode}</td>\n                        <td>{Flight.Arrival.AirportCode}</td>\n                        <td>\n                          {getDateHour(\n                            Flight.Departure.ScheduledTimeLocal.DateTime\n                          )}\n                        </td>\n                        <td>\n                          {getDateHour(\n                            Flight.Arrival.ScheduledTimeLocal.DateTime\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  }\n                });\n              } else {\n                return (\n                  <tr>\n                    <td>\n                      {getDuration(Flight.TotalJourney.Duration)}\n                      <br />\n                      Non-stop\n                    </td>\n                    <td>{Flight.Flight.MarketingCarrier.AirlineID}</td>\n                    <td>{Flight.Flight.MarketingCarrier.FlightNumber}</td>\n                    <td>{Flight.Flight.Departure.AirportCode}</td>\n                    <td>{Flight.Flight.Arrival.AirportCode}</td>\n                    <td>\n                      {getDateHour(\n                        Flight.Flight.Departure.ScheduledTimeLocal.DateTime\n                      )}\n                    </td>\n                    <td>\n                      {getDateHour(\n                        Flight.Flight.Arrival.ScheduledTimeLocal.DateTime\n                      )}\n                    </td>\n                  </tr>\n                );\n              }\n            })}\n          </tbody>\n        </Table>\n      )}\n    </div>\n  );\n};\n\nexport default FlightsList;\n","import React, { Component } from \"react\";\nimport Hero from \"../components/hero/hero\";\nimport FlightsForm from \"../components/Flights/FlightsForm\";\nimport FlightsList from \"../components/Flights/FlightsList\";\n\nexport default class Flights extends Component {\n  state = {\n    flightsDataInbound: [],\n    flightsDataOutbound: []\n  };\n\n  refreshflightsList = response => {\n      this.setState ({\n        flightsDataInbound: response.flightsDataInbound,\n        flightsDataOutbound: response.flightsDataOutbound\n      }) \n  };\n\n  render() {\n    return (\n      <div>\n        <Hero\n          videosrc=\"https://pixabay.com/videos/download/video-10816_medium.mp4\"\n          h1=\"Flights\"\n          h2=\"Choose your flights. Fly high.\"\n        />\n\n        <FlightsForm refreshflightsList={this.refreshflightsList} />\n        <FlightsList inboundFlights={this.state.flightsDataInbound} outboundFlights={this.state.flightsDataOutbound}/>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react'\nimport Hero from \"../components/hero/hero\"\n\nexport default class Hotels extends Component {\n  render() {\n    return (\n      <div>\n         <Hero\n          videosrc=\"https://pixabay.com/videos/download/video-24216_medium.mp4\"\n          h1=\"Hotels\"\n          h2=\"Whether luxurious, comfortable or just exciting. You choose.\"\n        />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Bikes extends Component {\n  render() {\n    return (\n      <div>\n        \n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Switch,Route } from \"react-router-dom\";\nimport Flights  from \"./containers/Flights\";\nimport Hotels from \"./containers/Hotels\";\nimport Bikes from \"./containers/Bikes\";\nimport Hero from \"./components/hero/hero\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n\n      <Switch>\n        <Route exact path=\"/Flights\" component={Flights} />\n        <Route exact path=\"/Hotels\" component={Hotels} />\n        <Route exact path=\"/Bikes\" component={Bikes} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { usePromiseTracker } from \"react-promise-tracker\";\nimport Loader from 'react-loader-spinner';\n\nconst LoadingIndicator = props => {\n  const { promiseInProgress } = usePromiseTracker();\n\n  return promiseInProgress && \n    <div\n      style={{\n        position: \"absolute\",\n        zIndex: 2147483647,\n        width: \"100%\",\n        height: \"100\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }}\n    >\n      <Loader type=\"Plane\" color=\"#ffffff\" height=\"100\" width=\"100\" />\n</div>\n};\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n    <LoadingIndicator/>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}